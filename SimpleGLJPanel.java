/*
 * SimpleGLJPanel.java
 *
 * 
 */
/* TEST KODLARI
 * 3(i>>)i4(i<<)
 * 2(4([i]>>)<)
 * 4(ii>>)>i4(i<<)>>i
 * >4(ii2(<<<ii))
 * 8(i>>i>i)
 * */

package org.yourorghere;

import com.sun.opengl.util.Animator;
import com.sun.opengl.util.Screenshot;
import java.awt.EventQueue;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.media.opengl.GLCapabilities;
import javax.media.opengl.GLEventListener;
import javax.media.opengl.GLJPanel;
import javax.swing.*;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;

/**
 *
 * @author 
 * @author 
 */
public class SimpleGLJPanel extends JFrame {

    
GLRenderer selam = new GLRenderer(); // çizim fonksyonlarına erişebilmek için

    /** Creates new form MainFrame */
    public SimpleGLJPanel() {
        initComponents();
        setTitle("proje");

        panel.addGLEventListener(selam);
        

        this.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                // Run this on another thread than the AWT event queue to
                // make sure the call to Animator.stop() completes before
                // exiting
                new Thread(new Runnable() {

                    public void run() {
                        
                        System.exit(0);
                    }
                }).start();
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new GLJPanel(createGLCapabilites());
        jButton1 = new JButton();
        jButton2 = new JButton();
        jButton3 = new JButton();
        jTextField1 = new JTextField();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        jButton4 = new JButton();
        jButton5 = new JButton();
        jLabel3 = new JLabel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        GroupLayout panelLayout = new GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 513, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 435, Short.MAX_VALUE)
        );

        jButton1.setText("<");
        jButton1.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText(">");
        jButton2.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jButton3.setText("i");
        jButton3.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jLabel1.setText("girilecek kodlar? yaziniz");

        jLabel2.setText("kaplumbagnin hareketleri");

        jButton4.setText("G?T");
        jButton4.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        jButton5.setText("kaydet");
        jButton5.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        jLabel3.setText("");

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addComponent(jLabel2, GroupLayout.PREFERRED_SIZE, 258, GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                    .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jButton1)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton3)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton2))
                                    .addComponent(jTextField1, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 168, GroupLayout.PREFERRED_SIZE)
                                    .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                            .addComponent(jButton4, Alignment.TRAILING)
                                            .addComponent(jButton5, Alignment.TRAILING))
                                        .addContainerGap())))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 144, GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(69, 69, 69)
                                        .addComponent(jLabel3, GroupLayout.PREFERRED_SIZE, 73, GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(panel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jTextField1, GroupLayout.PREFERRED_SIZE, 45, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(80, 80, 80)
                .addComponent(jLabel3, GroupLayout.PREFERRED_SIZE, 63, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton5)
                .addGap(46, 46, 46))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4MouseClicked(MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
    	// Panel sıfırlanır ve text fielddan çizim kodu okunur
     	selam.i=0;
    	panel.display();
    	selam.sifirla();
    	kodoku();
     
    }//GEN-LAST:event_jButton4MouseClicked

    private void jButton1MouseClicked(MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
         selam.kucuktur(); // Açı değiştirilir ve yeni açı değeri ekrana yazdırılır
    	 panel.display();
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton3MouseClicked(MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        panel.display(); //İlerleme butonu alana dısına taşıldığında message box ile uyarır
        if (selam.check == true){
        	
        	JOptionPane.showMessageDialog(null,"Alanin Disina Cizim Yapilamaz","Hata",JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton2MouseClicked(MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        selam.buyuktur();// Açı değiştirilir ve yeni açı değeri ekrana yazdırılır
        panel.display();
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton5MouseClicked(MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
       selam.gir(); // Ekran görüntüsü almak için kullanılır
        panel.display();
        
    }//GEN-LAST:event_jButton5MouseClicked
  
   
    private void kodoku(){
        String kod= jTextField1.getText();
        String valid = " 0123456789i<>[]()";
        int c1 = 0;
        boolean check = true; // kontrol değişkeni false gelirse kod hatalıdır.
        int[] opc = new int[10]; // ( koordinatlarını tutar 0. indis ( sayısını belirtir
        int[] okpc = new int[10]; // [ koordinatlarını tutar 0. indis [ sayısını belirtir
        int[] cpc = new int[10]; // ) koordinatlarını tutar 0. indis ) sayısını belirtir
        int[] ckpc = new int[10];// ] koordinatlarını tutar 0. indis ] sayısını belirtir
        opc[0] = 0;
        okpc[0] = 0;
        cpc[0] = 0;
        ckpc[0] = 0;
        for(int i=0;i<kod.length();i++){ // Parantezler sayılır ve koordinatları kaydedilir
        	if (kod.charAt(i) == '('){
        		opc[0]++;
        		opc[opc[0]] = i;
        	}
        	if (kod.charAt(i) == '['){
        		okpc[0]++;
        		okpc[okpc[0]] = i;
        	}
        	if (kod.charAt(i) == ')'){
        		cpc[0]++;
        		cpc[cpc[0]] = i;
        	}
        	if (kod.charAt(i) == ']'){
        		ckpc[0]++;
        		ckpc[ckpc[0]] = i;
        	}
        	if (valid.contains(""+kod.charAt(i)) == false){
        		check = false;
        	}
        	
        }
        if (opc[0] != cpc[0] || okpc[0] != ckpc[0]){
        	// Eksik parantez olup olmadığı kontrol edilir
        	check=false;
        }
        
        for (int i=1;i<=opc[0];i++){
        	if(opc[1] != 0){// () lerin çarpanlarının eksik olup olmadığı kontrol edilir
        	String s = "0123456789";
        	char es =kod.charAt(opc[i]-1);
        	if (s.contains(""+es)){
        	}
        	else{
        		check = false;
        		break;
        	}
        	}else{
        		check = false;
        		break;
        	}
        	
        }
        for (int i=1;i<okpc[0];i++){ // [ kapanmadan başka bir [ gelip gelmediği kontol edilir
        	if (ckpc[i]>okpc[i] && ckpc[i]<okpc[i+1]){
        	}
        	else {
        		check = false;
        		break;
        	}
        }
        

        
        if (check == true){
            for (int i=opc[0];i>=1;i--){
            	char es =kod.charAt(opc[i]-1);
            	int c = Integer.parseInt(""+es);
            	int l = kod.indexOf(')',opc[i]);
            	String sub = kod.substring(opc[i],l+1); // 4(kod) şablonu kaydedilir
            	String rep = "";
            	for (int j=0;j<c;j++){
            	
            		rep+=sub.substring(1,sub.length()-1); // kod çarpan kere birleştirilir
            	}
            	kod = kod.replace(es+sub,rep);           // 4(kod) şablonu çarpılmış hali ile değiştirilir. Ör: 4(kod)=kodkodkodkod 
//            	System.out.println(kod+" "+rep+" "+sub); 
            }
        for(int i=0;i<kod.length();i++){
        	//Çizim fonksyonları
        	if (kod.charAt(i) == '<'){
        		selam.kucuktur();
        		panel.display();
        			
        	}
        	
        	else if (kod.charAt(i) == '>'){
        		selam.buyuktur();
        		panel.display();
        		
        	}
        	
        	else if (kod.charAt(i) == 'i'){
        		panel.display();
        		
                if (selam.check == true){
                	
                	JOptionPane.showMessageDialog(null,"Alanin Disina Cizim Yapilamaz","Hata",JOptionPane.INFORMATION_MESSAGE);
                }
                
        	}
        	
        	else if (kod.charAt(i) == '['){
        		selam.kaydet();
        		
        	}        	
        	
        	else if (kod.charAt(i) == ']'){
        		selam.hatirla();
        		
        	}
         
         
     }
    }
        else {
        	
        	JOptionPane.showMessageDialog(null,"Sozdizimi Hatasi","Hata",JOptionPane.INFORMATION_MESSAGE);
        }
        
    }
    /**
     * Called from within initComponents().
     * hint: to customize the generated code choose 'Customize Code' in the contextmenu
     * of the selected UI Component you wish to cutomize in design mode.
     * @return Returns customized GLCapabilities.
     */
    private GLCapabilities createGLCapabilites() {
        
        GLCapabilities capabilities = new GLCapabilities();
        capabilities.setHardwareAccelerated(true);

        // try to enable 2x anti aliasing - should be supported on most hardware
        capabilities.setNumSamples(2);
        capabilities.setSampleBuffers(true);
        
        return capabilities;
    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        // Run this in the AWT event thread to prevent deadlocks and race conditions
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                // switch to system l&f for native font rendering etc.
                try{
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                }catch(Exception ex) {
                    Logger.getLogger(getClass().getName()).log(Level.INFO, "can not enable system look and feel", ex);
                }
                
                SimpleGLJPanel frame = new SimpleGLJPanel();
                frame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton jButton1;
    private JButton jButton2;
    private JButton jButton3;
    private JButton jButton4;
    private JButton jButton5;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JTextField jTextField1;
    private GLJPanel panel;
    // End of variables declaration//GEN-END:variables

}